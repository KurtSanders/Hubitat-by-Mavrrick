// Hubitat driver for Govee Light, Plug, Switch driver using Cloud API
// Version 0.1.0
//
// 9-12-22  Initial release 

metadata {
	definition(name: "Govee Lights, Plugs, and Switches Driver", namespace: "Mavrrick", author: "Mavrrick") {
		capability "Switch"
		capability "ColorControl"
		capability "ColorTemperature"
		capability "Light"
		capability "SwitchLevel"
		capability "ColorMode"
		capability "Refresh"
		
		attribute "colorName", "string"
        
        
    }

	preferences {		
		section("Device Info") {
            input("pollRate", "number", title: "Polling Rate (seconds)\nDefault:300", defaultValue:300, submitOnChange: true, width:4)
			input(name: "aRngBright", type: "bool", title: "Alternate Brightness Range", description: "For devices that expect a brightness range of 0-254", defaultValue: false)
            input(name: "debugLog", type: "bool", title: "Debug Logging", defaultValue: false)
		}
		
	}
}

def parse(String description) {

}

def on() {
	sendEvent(name: "switch", value: "on")
	sendCommand("turn", "on")
}

def off() {
	sendEvent(name: "switch", value: "off")
	sendCommand("turn", "off")
}

def setColorTemperature(value)
{
    if (value < device.getDataValue("ctMin").toInteger()) { value = device.getDataValue("ctMin")}
    if (value > device.getDataValue("ctMax").toInteger()) { value = device.getDataValue("ctMax")}
	sendEvent(name: "colorMode", value: "CT")
    if (debugLog) { log.debug "ColorTemp = " + value }
	def intvalue = value.toInteger()
	
	sendEvent(name: "colorTemperature", value: intvalue)
    
		sendCommand("colorTem", intvalue)
		setCTColorName(intvalue)
}   



def setCTColorName(value)
{
		if (value < 2600) {
			sendEvent(name: "colorName", value: "Warm White")
		}
		else if (value < 3500) {
			sendEvent(name: "colorName", value: "Incandescent")
		}
		else if (value < 4500) {
			sendEvent(name: "colorName", value: "White")
		}
		else if (value < 5500) {
			sendEvent(name: "colorName", value: "Daylight")
		}
		else if (value >=  5500) {
			sendEvent(name: "colorName", value: "Cool White")
		}
	
}





    
def setColor(value) {
    if (debugLog) { log.debug "HSBColor = "+ value }
	if (value instanceof Map) {
		def h = value.containsKey("hue") ? value.hue : null
		def s = value.containsKey("saturation") ? value.saturation : null
		def b = value.containsKey("level") ? value.level : null
		setHsb(h, s, b)
	} else {
        if (debugLog) {log.warn "Invalid argument for setColor: ${value}"}
    }
}

def setHsb(h,s,b)
{

	hsbcmd = [h,s,b]
//	log.debug "Cmd = ${hsbcmd}"

	sendEvent(name: "hue", value: "${h}")
	sendEvent(name: "saturation", value: "${s}")
	if(b!= device.currentValue("level")?.toInteger()){
		sendEvent(name: "level", value: "${b}")
		setLevel(b)
	}
	rgb = hubitat.helper.ColorUtils.hsvToRGB(hsbcmd)
	def rgbmap = [:]
	rgbmap.r = rgb[0]
	rgbmap.g = rgb[1]
	rgbmap.b = rgb[2]   
    
 
		sendEvent(name: "colorMode", value: "RGB")
		sendCommand("color", rgbmap)
    
}

def setHue(h)
{
    setHsb(h,device.currentValue( "saturation" )?:100,device.currentValue("level")?:100)
}

def setSaturation(s)
{
	setHsb(device.currentValue("hue")?:0,s,device.currentValue("level")?:100)
}

def setLevel(v,duration){
    setLevel(v)
}

def setLevel(v)
{
		sendEvent(name: "level", value: v)
		if(aRngBright){v=incBrightnessRange(v)}
//		log.debug "Sent Brightness = ${v}"
		sendCommand("brightness", v)
}


//Turn Hubitat's 0-100 Brightness range to the 0-254 expected by some devices
def incBrightnessRange(v)
{
	v=v*(254/100)
	return Math.round(v)
}


//Go from 0-254 brightness range from some devices to Hubitat's 0-100 Brightness range. Maybe not needed?
def decBrightnessRange(v)
{
	v=v*(100/254)
	return Math.round(v)
}




def white() {

}


/* def DeviceInfo(){
// device.getDataValue("deviceModel")    
log.debug "DEVICE INFORMATION"
	     def params = [
            uri   : "https://developer-api.govee.com",
            path  : '/v1/devices',
			headers: ["Govee-API-Key": device.getDataValue("apiKey"), "Content-Type": "application/json"],
        ]
    


try {

			httpGet(params) { resp ->

				//List each device assigned to current API key
				//log.debug resp.data
				resp.data.data.devices.each{
					deviceID = it.device
					deviceModel = it.model
					deviceName = it.deviceName
                    controllable = it.controllable
                    retrievable = it.retrievable
                    ctMin = it.properties.colorTem.range.min
                    ctMax = it.properties.colorTem.range.max
					log.debug "$deviceName	Address: $deviceID	Model: $deviceModel retrievable: $retrievable controllable: $controllable Color Temp: $ctMin Color Temp: $ctMax"
				}

				//Save the last device to preferences
				curDeviceID = resp.data.data.devices.last().device
				curDeviceModel = resp.data.data.devices.last().model

				device.updateSetting("Model",[value:curDeviceModel, type:"text"])
				device.updateSetting("MACAddr",[value:curDeviceID, type:"text"])

				runIn(2, 'setupDevice')
				return resp.data
			}
			
	} catch (groovyx.net.http.HttpResponseException e) {
		log.error "Error: e.statusCode ${e.statusCode}"
		log.error "${e}"
		
		return 'unknown'
	}    
}



def getDeviceSupport(){
	    def params = [
			uri   : "https://developer-api.govee.com",
			path  : '/v1/devices',
			headers: ["Govee-API-Key": device.getDataValue("apiKey"), "Content-Type": "application/json"],
			query: [device: device.getDataValue("deviceID"), model: device.getDataValue("deviceModel")],
		]
    


try {

			httpGet(params) { resp ->

				state.hasRetrievable = resp.data.data.devices.find({it.device==settings.MACAddr}).retrievable

				return resp.data
			}
			
	} catch (groovyx.net.http.HttpResponseException e) {
		log.error "Error: e.statusCode ${e.statusCode}"
		log.error "${e}"
		
		return 'unknown'
	}
}
*/


private def sendCommand(String command, payload) {


     def params = [
            uri   : "https://developer-api.govee.com",
            path  : '/v1/devices/control',
			headers: ["Govee-API-Key": device.getDataValue("apiKey"), "Content-Type": "application/json"],
            contentType: "application/json",      
			body: [device: device.getDataValue("deviceID"), model: device.getDataValue("deviceModel"), cmd: ["name": command, "value": payload]],
        ]
    

try {

			httpPut(params) { resp ->
				
                if (debugLog) { log.debug "response.data="+resp.data}
                resp.headers.each {
//                    log.debug "${it.name}: ${it.value}"                    
                    name = it.name
                    value=it.value
                    if (name == "X-RateLimit-Remaining") {state.DailyLimitRemaining = value}
                    if (name == "API-RateLimit-Remaining") {state.MinRateLimitRemainig = value}
            }
                return resp.data
		}
	} catch (groovyx.net.http.HttpResponseException e) {
		log.error "Error: e.statusCode ${e.statusCode}"
		log.error "${e}"
        if (debugLog) {log.debug "${resp.header}"}
    
		return 'unknown'
	}
}


def getDeviceState(){
	
		def params = [
			uri   : "https://developer-api.govee.com",
			path  : '/v1/devices/state',
			headers: ["Govee-API-Key": device.getDataValue("apiKey"), "Content-Type": "application/json"],
			query: [device: device.getDataValue("deviceID"), model: device.getDataValue("deviceModel")],
        ]
    


try {

			httpGet(params) { resp ->

                if (debugLog) { log.debug resp.data.data.properties }
				varPower = resp.data.data.properties.find({it.powerState})?.powerState
				varBrightness = resp.data.data.properties.find({it.brightness})?.brightness
				mapColor = resp.data.data.properties.find({it.color})?.color                
				varCT = resp.data.data.properties.find({it.colorTemInKelvin})?.colorTemInKelvin

                //if(aRngBright){varBrightness=decBrightnessRange(varBrightness)}
				//log.debug "Recvd Brightness = ${varBrightness}"
				
				sendEvent(name: "switch", value: varPower)
				
				
				if(varBrightness){
					sendEvent(name: "level", value: varBrightness)
				}
				
				
                if(varCT){
					sendEvent(name: "colorTemperature", value: varCT)
					sendEvent(name: "colorMode", value: "CT")
					setCTColorName(varCT)					
                }
                
				if(mapColor){
					r=mapColor.r
					g=mapColor.g
					b=mapColor.b
					HSVlst=hubitat.helper.ColorUtils.rgbToHSV([r,g,b])
					hue=HSVlst[0].toInteger()
					sat=HSVlst[1].toInteger()
					sendEvent(name: "hue", value: hue)
					sendEvent(name: "saturation", value: sat)
					sendEvent(name: "colorMode", value: "RGB")
				
				}
				
				return resp.data
			}
			
	} catch (groovyx.net.http.HttpResponseException e) {
		log.error "Error: e.statusCode ${e.statusCode}"
		log.error "${e}"
		return 'unknown'
	}
}

def poll() {
	refresh()
}

def refresh() {
    if(device.getDataValue("retrievable") =='true'){
        getDeviceState()
    }
}

def updated() {
    runIn(pollRate,refresh)
    if (logEnable) runIn(1800, logsOff)
//get devices or get specific device info
/* if(!settings.MACAddr || !settings.Model)
	{
		DeviceInfo()
	}
	else{
		setupDevice()
	}
*/ 
}

def setupDevice(){
//		getDeviceSupport()
		refresh()
}

def installed(){
    sendEvent(name: "hue", value: 0)
    sendEvent(name: "saturation", value: 100)
    sendEvent(name: "level", value: 100) 
    runIn(pollRate,refresh)
}

def logsOff() {
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable", [value: "false", type: "bool"])
}
