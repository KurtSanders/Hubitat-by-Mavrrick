/* groovylint-disable ImplementationAsType, InvertedCondition, LineLength, MethodReturnTypeRequired, MethodSize, NestedBlockDepth, NoDef, UnnecessaryGString, UnnecessaryObjectReferences, UnnecessaryToString, VariableTypeRequired */
/*****************************************************************************************************************
 *  Source: https://github.com/HubitatCommunity/InfluxDB-Logger
 *
 *  Raw Source: https://raw.githubusercontent.com/HubitatCommunity/InfluxDB-Logger/master/influxdb-logger.groovy
 *
 *  Forked from: https://github.com/codersaur/SmartThings/tree/master/smartapps/influxdb-logger
 *  Original Author: David Lomas (codersaur)
 *  Hubitat Elevation version maintained by HubitatCommunity (https://github.com/HubitatCommunity/InfluxDB-Logger)
 *
 *  Description: A SmartApp to log Hubitat device states to an InfluxDB database.
 *  See Codersaur's github repo for more information.
 *
 *  License:
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *   for the specific language governing permissions and limitations under the License.
 *
 *   Modifcation History
 *   Date       Name            Change
 *   2019-02-02 Dan Ogorchock   Use asynchttpPost() instead of httpPost() call
 *   2019-09-09 Caleb Morse     Support deferring writes and doing buld writes to influxdb
 *   2022-06-20 Denny Page      Remove nested sections for device selection.
 *   2023-01-08 Denny Page      Address whitespace related lint issues. No functional changes.
 *   2023-01-09 Craig King      Added InfluxDb2.x support.
 *   2023-01-12 Denny Page      Automatic migration of Influx 1.x settings.
 *   2023-01-15 Denny Page      Clean up various things:
 *                              Remove Group ID/Name which are not supported on Hubitat.
 *                              Remove Location ID and Hub ID which are not supported on Hubitat (always 1).
 *                              Remove blocks of commented out code.
 *                              Don't set page sections hidden to false where hideable is false.
 *                              Remove state.queuedData.
 *   2023-01-22 PJ              Add filterEvents option for subscribe.
 *                              Fix event timestamps.
 *   2023-01-23 Denny Page      Allow multiple instances of the application to be installed.
 *                              NB: This requires Hubitat 2.2.9 or above.
 *   2023-01-25 Craig King      Updated Button selection to valid capability for Hubitat
 *****************************************************************************************************************/

definition(
    name: "InfluxDB Logger Advanced Manager",
    namespace: "nowhereville",
    author: "Joshua Marker (tooluser)",
    description: "Log device states to InfluxDB",
    category: "My Apps",
    parent: "nowhereville:InfluxDB Logger Advanced",
    importUrl: "https://raw.githubusercontent.com/HubitatCommunity/InfluxDB-Logger/master/influxdb-logger.groovy",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "",
    singleThreaded: true
)

    import groovy.transform.Field

preferences {
    page(name: "setupMain")
    page(name: "connectionPage")
}

def setupMain() {
    dynamicPage(name: "setupMain", title: "InfluxDB Logger Settings", install: true, uninstall: true, returnPath: "list") {
        section("") {
            input "appName", "text", title: "Aplication Name", multiple: false, required: false, submitOnChange: true, defaultValue: app.getLabel()

            href(
                name: "href",
                title: "Connection Settings",
                description : prefDatabaseHost == null ? "Configure database connection parameters" : prefDatabaseHost,
                required: true,
                page: "connectionPage"
            )

            input(
                name: "configLoggingLevelIDE",
                title: "IDE Live Logging Level:\nMessages with this level and higher will be logged to the IDE.",
                type: "enum",
                options: [
                    "0" : "None",
                    "1" : "Error",
                    "2" : "Warning",
                    "3" : "Info",
                    "4" : "Debug",
                    "5" : "Trace"
                ],
                defaultValue: "1",
                displayDuringSetup: true,
                required: false
            )
        }

        section("Logging App Management") {
            paragraph "This section will help you setup what InfluxDB Logger will monitor and send to InfluxDB. There are 3 types of jobs apps that can be setup. You do not have to have all of them created or you can have multiple if you wish to."
            paragraph "To setup a job that will send events to InfluxDB as the occur in Hubitat please click on the Create Event Logging App button below."
            app(name: "Device Monitor", appName: "InfluxDB Logger Advanced Device Monitor", namespace: "nowhereville", title: "Create Event Logging App", multiple: true)
            paragraph "Some devices do not regularly generate events. If you want InfluxDB Logger to generate and then push events for such devices please click on the Create Push Current State app button below."
            app(name: "Soft Poll Apps", appName: "InfluxDB Logger Advanced Push Events", namespace: "nowhereville", title: "Create Push Current States (useful graphing of slowly changing/reporting devices)", multiple: true)            
            paragraph "If you would like to keep track of Hub events please click on the Create Log Hub Events app button below."
            app(name: "System Montior", appName: "InfluxDB Logger Advanced System", namespace: "nowhereville", title: "Create Log Hub Events", multiple: false)            
        }
        section("Data Protection Settings") {
                input "bkupReset", "bool", title:"Reset data protection values. This will clear any pending data that has not been written yet to the DB", defaultValue:false, required: true            
        }
    }
}

def connectionPage() {
    dynamicPage(name: "connectionPage", title: "Connection Properties", install: false, uninstall: false) {
        section {
            input "prefDatabaseTls", "bool", title:"Use TLS?", defaultValue: false, submitOnChange: true, required: true
            if (prefDatabaseTls) {
                input "prefIgnoreSSLIssues", "bool", title:"Ignore SSL cert verification issues", defaultValue:false, required: true
            }
            input "prefDatabaseHost", "text", title: "Host", defaultValue: "192.168.1.100", required: true
            input "prefDatabasePort", "text", title : "Port", defaultValue : prefDatabaseTls ? "443" : "8086", required : false
            input(
                name: "prefInfluxVer",
                title: "Influx Version",
                type: "enum",
                options: [
                    "1" : "v1.x",
                    "2" : "v2.x"
                ],
                defaultValue: "1",
                submitOnChange: true,
                required: true
            )
            if (prefInfluxVer == "1") {
                input "prefDatabaseName", "text", title: "Database Name", defaultValue: "Hubitat", required: true
            } else if (prefInfluxVer == "2") {
                input "prefOrg", "text", title: "Org", defaultValue: "", required: true
                input "prefBucket", "text", title: "Bucket", defaultValue: "", required: true
            }
            input(
                name: "prefAuthType",
                title: "Authorization Type",
                type: "enum",
                options: [
                    "none" : "None",
                    "basic" : "Username / Password",
                    "token" : "Token"
                ],
                defaultValue: "none",
                submitOnChange: true,
                required: true
            )
            if (prefAuthType == "basic") {
                input "prefDatabaseUser", "text", title: "Username", defaultValue: "", required: false
                input "prefDatabasePass", "text", title: "Password", defaultValue: "", required: false
            } else if (prefAuthType == "token") {
                input "prefDatabaseToken", "text", title: "Token", required: true
            }
        }
    }
}


/**
 *  installed()
 *
 *  Runs when the app is first installed.
 **/
def installed() {
    state.installedAt = now()
    state.loggingLevelIDE = 5
    updated()
    state.loggerQueue = [:]
    state.failed = false
    state.recoveryBatch=0
    state.queueTotSize = 0
    state.inRecovery = false
    log.info "${app.label}: Installed with settings: ${settings}"
}

/**
 *  uninstalled()
 *
 *  Runs when the app is uninstalled.
 **/
def uninstalled() {
    log.info "${app.label}: uninstalled"
}

/**
 *  updated()
 *
 *  Runs when app settings are changed.
 *
 *  Updates device.state with input values and other hard-coded values.
 *  Builds state.deviceAttributes which describes the attributes that will be monitored for each device collection
 *  (used by manageSubscriptions() and softPoll()).
 *  Refreshes scheduling and subscriptions.
 **/
def updated() {
    logger("updated()", "trace")
    unschedule(stateLoggerSync)

    if (bkupReset) {
        state.loggerQueue = [:]
        state.failed = false
        state.recoveryBatch = 0
        state.inRecovery = false
        state.queueTotSize = 0
        }
        
    // Update application name
    app.updateLabel(appName + " : " + prefDatabaseHost)

    // Update internal state:
    state.loggingLevelIDE = (settings.configLoggingLevelIDE) ? settings.configLoggingLevelIDE.toInteger() : 3

    // Database config:
    setupDB()

}

/**
 *  postToInfluxDB()
 *
 *  Posts data to InfluxDB.
 *
 *  Uses hubAction instead of httpPost() in case InfluxDB server is on the same LAN as the Smartthings Hub.
 **/
def postToInfluxDB(String data, postCount) {
    if (state.postCount == null) {
        state.postCount = 0
    }
    state.postCount += postCount
    
    if (state.uri == null) {
        // Failsafe if using an old config
        setupDB()
    }
    recoverHold(data)
    
    logger("postToInfluxDB(): Posting data to InfluxDB: ${state.uri}, PostCount: ${postCount}", "info")
    logger("postToInfluxDB(): Posting data to InfluxDB:  Data: ${data}", "debug")

    // Hubitat Async http Post
    try {
        def postParams = [
            uri: state.uri,
            requestContentType: 'application/json',
            contentType: 'application/json',
            headers: state.headers,
            ignoreSSLIssues: settings.prefIgnoreSSLIssues,
            body : data
        ]
        asynchttpPost('handleInfluxResponse', postParams, [data: data])
    } catch (e) {
        logger("postToInfluxDB(): Something went wrong when posting: ${e}", "error")
//        state.loggerQueue += ${data}
    }
}

/**
 *  handleInfluxResponse()
 *
 *  Handles response from post made in postToInfluxDB().
 **/
def handleInfluxResponse(hubResponse, data) {
    logger("postToInfluxDB(): status of post call is: ${hubResponse.status}", "info")
    if (hubResponse.status == 204) {
	    logger("handleInfluxResponse(): InfluxDB connectivity to database working", "info")
        if (state.failed){
            if (state.inRecovery) {
                logger("handleInfluxResponse(): Already in recovery", "info")
                dbRecoveryPost()
            } else {   
                logger("handleInfluxResponse(): Starting Recovery", "warn")
                state.inRecovery = true
                dbRecoveryPost()
                }
        } else {
            state.postCount = 0    
        }
    } else if (hubResponse.status == 400 ) {
        logger("handleInfluxResponse(): Data Sent to Influx DB was Malformed. Please correct selections to send proper data. : Status: ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
    } else if (hubResponse.status == 401 ) {
        logger("handleInfluxResponse(): Authorization failure. Please check your Authentication configuration : Status: ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
        recoveryQueue(data)
    } else if (hubResponse.status == 404 ) {
        logger("handleInfluxResponse(): Resource not found in InfluxDB database. Please confirm your Database or Org/Bucket : ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
        recoveryQueue(data)
    } else if (hubResponse.status == 408 ) {
        logger("handleInfluxResponse(): Problem communicating with InfluxDB Host. Check Secondary error messages for details : ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
        recoveryQueue(data)
    } else if (hubResponse.status == 413 ) {
        logger("handleInfluxResponse(): Trying to load to much data at once. Please adjust post limits to ensure data is not to large : ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
    } else if (hubResponse.status == 429 ) {
        logger("handleInfluxResponse(): (Cloud Only Error) Service quota exceeded for remote InfluxDB database adjust write pattern to database : ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
        recoveryQueue(data)
    } else if (hubResponse.status == 503 ) {
        logger("handleInfluxResponse(): (Cloud Only Error) Service quota exceeded for remote InfluxDB database adjust cordinality to correct : ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
        recoveryQueue(data)
    } else if (hubResponse.status >= 400 ){
        logger("handleInfluxResponse(): Something went wrong! Response from InfluxDB: Status: ${hubResponse.status}, Error: ${hubResponse.errorMessage}, Headers: ${hubResponse.headers}, Data: ${data}", "error")
        recoveryQueue(data)
    }    
}




/*****************************************************************************************************************
 *  Private Helper Functions:
 *****************************************************************************************************************/

/**
 *  setupDB()
 *
 *  Set up the database uri and header state variables.
 **/
private setupDB() {
    String uri
    def headers = [:]

    if (settings?.prefDatabaseTls) {
        uri = "https://"
    } else {
        uri = "http://"
    }

    uri += settings.prefDatabaseHost
    if (settings?.prefDatabasePort) {
        uri += ":" + settings.prefDatabasePort
    }

    if (settings?.prefInfluxVer == "2") {
        uri += "/api/v2/write?org=${settings.prefOrg}&bucket=${settings.prefBucket}"
    } else {
        // Influx version 1
        uri += "/write?db=${settings.prefDatabaseName}"
    }

    if (settings.prefAuthType == null || settings.prefAuthType == "basic") {
        if (settings.prefDatabaseUser && settings.prefDatabasePass) {
            def userpass = "${settings.prefDatabaseUser}:${settings.prefDatabasePass}"
            headers.put("Authorization", "Basic " + userpass.bytes.encodeBase64().toString())
        }
    } else if (settings.prefAuthType == "token") {
        headers.put("Authorization", "Token ${settings.prefDatabaseToken}")
    }

    state.uri = uri
    state.headers = headers

    logger("New URI: ${uri}", "info")

    // Clean up old state vars if present
    state.remove("databaseHost")
    state.remove("databasePort")
    state.remove("databaseName")
    state.remove("databasePass")
    state.remove("databaseUser")
    state.remove("path")
}

/**
 *  logger()
 *
 *  Wrapper function for all logging.
 **/
private logger(msg, level = "debug") {
    switch (level) {
        case "error":
            if (state.loggingLevelIDE >= 1) log.error msg
            break

        case "warn":
            if (state.loggingLevelIDE >= 2) log.warn msg
            break

        case "info":
            if (state.loggingLevelIDE >= 3) log.info msg
            break

        case "debug":
            if (state.loggingLevelIDE >= 4) log.debug msg
            break

        case "trace":
            if (state.loggingLevelIDE >= 5) log.trace msg
            break

        default:
            log.debug msg
            break
    }
}

/**
 *  escapeStringForInfluxDB()
 *
 *  Escape values to InfluxDB.
 *
 *  If a tag key, tag value, or field key contains a space, comma, or an equals sign = it must
 *  be escaped using the backslash character \. Backslash characters do not need to be escaped.
 *  Commas and spaces will also need to be escaped for measurements, though equals signs = do not.
 *
 *  Further info: https://docs.influxdata.com/influxdb/v0.10/write_protocols/write_syntax/
 **/
private String escapeStringForInfluxDB(String str) {
    //logger("$str", "info")
    if (str) {
        str = str.replaceAll(" ", "\\\\ ") // Escape spaces.
        str = str.replaceAll(",", "\\\\,") // Escape commas.
        str = str.replaceAll("=", "\\\\=") // Escape equal signs.
        str = str.replaceAll("\"", "\\\\\"") // Escape double quotes.
        //str = str.replaceAll("'", "_")  // Replace apostrophes with underscores.
    }
    else {
        str = 'null'
    }
    return str
}

/**
*
* recoverHold()
*
* Hod execution of another batch until recovery is completed
*
**/
private recoverHold(data)
{    
    if (state.inRecovery){
        bkupNum = "b"+(state.loggerQueue.size() + 1)
        loggerinput = data.toString()
        state.loggerQueue.put(bkupNum, loggerinput)
    }
}

/**
*
* recoveryQueue()
*
* Hod execution of another batch until recovery is completed
*
**/
private recoveryQueue(data)
{   
    if (state.inRecovery) {
        logger("recoveryQueue(): Failure during Recovery process ", "warn")
        state.recoveryBatch = state.recoveryBatch - 1
        state.inRecovery = false
    } 
    else {
        if (state.failed == false) {
        state.failed = true
        }
    }
    bkupNum = "b"+(state.loggerQueue.size() + 1)
    loggerinput = data.data.toString()
    state.loggerQueue.put(bkupNum, loggerinput)
}

/**
 *  dbRecoveryPost()
 *
 *  Handles recovery processes from failed Posts to database.
 **/

private dbRecoveryPost(){
    logger("dbRecoveryPost(): InfluxDB recovery of pending transactions is being processed. ", "info")
    state.recoveryBatch = state.recoveryBatch + 1
    logger("dbRecoveryPost(): Currently in failed state. Are we done processing backlog: Backlog size ${state.loggerQueue.size()}, attempting to process process batch: ${state.recoveryBatch}", "warn")
    if (state.recoveryBatch <= state.loggerQueue.size() ) {            
        recoverNum = "b"+(state.recoveryBatch)
        logger("dbRecoveryPost(): There are ${state.loggerQueue.size()} batches to send to InfluxDB.", "info")
        queue = state.loggerQueue.get(recoverNum) 
        logger("dbRecoveryPost(): Processing batch:${recoverNum} queue:${queue}.", "info")
        queue = queue.replace("[", "")
        queue = queue.replace("]", "")
        logger("dbRecoveryPost(): Posting Queued data to InfluxDB: ${state.uri}, Data: [${queue}]", "info")
        try {
            def postParams = [
                uri: state.uri,
                requestContentType: 'application/json',
                contentType: 'application/json',
                headers: state.headers,
                ignoreSSLIssues: settings.prefIgnoreSSLIssues,
                body : queue
            ]
            asynchttpPost('handleInfluxResponse', postParams)
            } 
        catch (e) {
        logger("handleInfluxResponse(): Something went wrong when posting: ${e}", "error")         
        }
    } else {
        logger("dbRecoveryPost(): Backlog of ${state.loggerQueue.size()} has been fully processed. Reseting all backup values. Recovery Complete", "warn")
        state.failed = false
        state.recoveryBatch = 0
        state.loggerQueue = [:]
        state.inRecovery = false 
        state.queueTotSize = 0
        state.postCount = 0
    }    
}
