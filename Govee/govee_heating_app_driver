// Hubitat driver for Govee Appliances using Cloud API
// Version 1.0.15
//
// 2022-11-03 -	Initial Driver release for Govee Heating Appliance devices
// 2022-11-20 - Added a pending change condition and validation that the call was successful
// ----------- A retry of the last call will be attempted if rate limit is the cause for it failing
// ----------- Included code to update parent app for rate limit consumption.
// 2022-11-21 Moved status of cloud api call to the it's own attribute so it can be monitored easily

metadata {
	definition(name: "Govee Heating Appliance Driver", namespace: "Mavrrick", author: "Mavrrick") {
		capability "Switch"
		
        attribute "mode", "number"
        attribute "cloudAPI", "string"
        
		command "mode" , [[name: modeValue, type: 'NUMBER', description: "Mode will adjust the heating level of your device."]]        
    }

	preferences {		
		section("Device Info") {
            input(name: "debugLog", type: "bool", title: "Debug Logging", defaultValue: false)
		}
		
	}
}

def parse(String description) {

}

def on() {
    sendEvent(name: "cloudAPI", value: "Pending")
	sendCommand("turn", "on")
}

def off() {
    sendEvent(name: "cloudAPI", value: "Pending")
	sendCommand("turn", "off")
} 

def mode(modeValue){
    sendEvent(name: "cloudAPI", value: "Pending")
    sendCommand("mode", modeValue)
}    

private def sendCommand(String command, payload) {


     def params = [
            uri   : "https://developer-api.govee.com",
            path  : '/v1/appliance/devices/control',
			headers: ["Govee-API-Key": device.getDataValue("apiKey"), "Content-Type": "application/json"],
            contentType: "application/json",      
			body: [device: device.getDataValue("deviceID"), model: device.getDataValue("deviceModel"), cmd: ["name": command, "value": payload]],
        ]
    

try {

			httpPut(params) { resp ->
				
                if (debugLog) {log.debug "response.data="+resp.data}
                code = resp.data.code
                if (debugLog) {log.debug "response.data=" + code }
                if (code == 200 && command == "turn") {
                    sendEvent(name: "cloudAPI", value: "Success")
                    sendEvent(name: "switch", value: payload)
                    }    
                else if (code == 200 && command == "mode") {
                    sendEvent(name: "cloudAPI", value: "Success")
                    sendEvent(name: "switch", value: "on")
                    sendEvent(name: "mode", value: payload)
                    }        
                resp.headers.each {
                    if (debugLog) {log.debug "${it.name}: ${it.value}"}                    
                    name = it.name
                    value=it.value
                    if (name == "X-RateLimit-Remaining") {
                        state.DailyLimitRemaining = value
                        parent.apiRateLimits("DailyLimitRemainingV2", value)
                    }
                    if (name == "API-RateLimit-Remaining") {
                        state.MinRateLimitRemainig = value
                        parent.apiRateLimits("MinRateLimitRemainigV2", value)
                    }
            }
				return resp
		}
	} catch (groovyx.net.http.HttpResponseException e) {
        log.error "Error: e.statusCode ${e.statusCode}"
		log.error "${e}"
        if (e.statusCode == 429) {
            log.error "sendCommand():Cloud API Returned code 429, Rate Limit exceeded. Attempting again in one min."
            sendEvent(name: "cloudAPI", value: "Retry")
            pauseExecution(60000)
            sendCommand(command, payload)
        } 
        else {
          log.error "sendCommand():Unknwon Error. Attempting again in one min." 
            sendEvent(name: "cloudAPI", value: "Retry")
            pauseExecution(60000)
            sendCommand(command, payload)
        }    
		return 'unknown'
	}
}


def updated() {
if (logEnable) runIn(1800, logsOff)

}

/*
def setupDevice(){

} */

def installed(){
//    state.gearmax=max(device.getDataValue("gearsMax"))
  
}

def logsOff() {
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable", [value: "false", type: "bool"])
}
